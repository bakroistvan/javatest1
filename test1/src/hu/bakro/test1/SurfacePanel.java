package hu.bakro.test1;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : TiliToli
//  @ File Name : SurfacePanel.java
//  @ Date : 2014.05.04.
//  @ Author : Bakró Nagy István
//
//

public class SurfacePanel extends JPanel implements MouseListener {
	private final int _xNum;
	private final int _yNum;
	private final int _sidePixels;
	private final ToliCore _core;
	private MyFace _face;
	private final StopWatch _watch;
	
	public SurfacePanel(ToliCore core, StopWatch watch, int xNum, int yNum, int sidePixels) {
		_xNum = xNum;
		_yNum = yNum;
		_sidePixels = sidePixels;
		_core = core;
		_watch = watch;
		
		URL resource = getClass().getResource("áimage.jpg");
		
		try {
			_face = new MyFace(java.net.URLDecoder.decode(resource.getFile(), "UTF-8"), _xNum, _yNum, _sidePixels);
		} catch(IOException e) {
			JOptionPane.showMessageDialog(null, "File = " + resource.getFile() + " nem található.", "Hiba", JOptionPane.INFORMATION_MESSAGE);
		}
		
        this.setPreferredSize(new Dimension(_sidePixels * _yNum, _sidePixels * _xNum + 20));
        this.setBackground(Color.lightGray);
        this.addMouseListener(this);
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		int inPlace = 0;
		
		for(int xx = 0; xx < _xNum; xx++) {
			for(int yy = 0; yy < _yNum; yy++) {
				Item it = _core.getItem(xx, yy);
				// nem ures elemek rajzolasa
                if(it != null) {
                	String str = Integer.toString((it.getX() * _yNum) + it.getY());
                	
                    g.setColor(Color.darkGray);
                    g.fillRect((yy*_sidePixels)+1, (xx*_sidePixels)+1, _sidePixels-2, _sidePixels-2);
                    g.setColor(Color.black);
                    g.drawString(str, (int)((yy+0.5)*_sidePixels), (int)((xx+0.5)*_sidePixels));
                    
                    g.drawImage(_face.getFace(it.getX(), it.getY()), (yy*_sidePixels)+1, (xx*_sidePixels)+1, _sidePixels-2, _sidePixels-2, null);
                    
                    
                    inPlace = it.isInGoodPlace(xx, yy) ? inPlace+1 : inPlace;
                }
            }
        }
		String str = "Kész / Összes   -->   " + Integer.toString(inPlace) + " / " + Integer.toString(_xNum*_yNum - 1);
		g.setColor(Color.black);
		g.drawString(str, 10, _xNum*_sidePixels + 20);
	}
	
	/**
	 * Kattintas elkapasa es az elem-re a move meghivasa.
	 *
	 * @param    e
	**/
	public void mousePressed(MouseEvent e) {
		if(_core.isInProgress()) {
			//System.out.println(e.toString());
			// kattintas relativ koordinatainak elem-indexe alakitasa
	        int xToMove = e.getY() / _sidePixels;
	        int yToMove = e.getX() / _sidePixels;
	        
	        // kattintott elem mozgatasa
	        _core.move(xToMove, yToMove);
	        
	        this.repaint();
	        
	        // vizsgalat hogy vege a jateknak
	        if(_core.isGameOver()) {
	        	_watch.stop();
	        	JOptionPane.showMessageDialog(null, "Gyõztél!\nAz idõd: " + _watch.getTime(),
	        			"Gratulálok, Gyõztél!", JOptionPane.INFORMATION_MESSAGE);
	        }
		}
        
	}
	/*
	 * muszaj implementalni, de eldobjuk
	 */
	public void mouseClicked(MouseEvent e) {
	}
	
	public void mouseReleased(MouseEvent e) {
	}
	
	public void mouseEntered(MouseEvent e) {
	}
	
	public void mouseExited(MouseEvent e) {
	}
}
